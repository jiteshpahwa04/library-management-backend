// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String?
  password    String
  role        Role         @default(USER)
  carts       Cart[]
  communities Community[]
  collections Collection[]
  items       Item[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum Role {
  USER
  LIBRARIAN
  ADMIN
}

model Community {
  id               String       @id @default(uuid())
  name             String       @unique
  introductoryText String?
  shortDescription String?
  copyrightText    String?
  news             String?
  logoUrl          String?
  parentCommunity  String?
  collections      Collection[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  createdBy        User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById      String
  updatedById      String?
}

model Collection {
  id               String    @id @default(uuid())
  name             String
  introductoryText String?
  shortDescription String?
  copyrightText    String?
  news             String?
  license          String?
  logoUrl          String?
  communityId      String
  community        Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  items            Item[]
  createdAt        DateTime  @default(now())
  createdBy        User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById      String
  updatedAt        DateTime  @updatedAt
  updatedById      String?
}

model Item {
  id               String     @id @default(uuid())
  title            String
  authors          String[]
  otherTitles      String[]
  dateOfIssue      DateTime
  publisher        String?
  citation         String?
  seriesReports    Json? // Stores array of objects [{ series, reportNumber }]
  identifiers      Json? // Stores array of objects [{ type, identifier }]
  types            String[]
  language         String?
  subjectKeywords  String?
  abstract         String?
  sponsors         String?
  description      String?
  licenseConfirmed Boolean    @default(false)
  thumbnail        String?
  collectionId     String
  collection       Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  files            String[]
  carts            Cart[]

  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String?
}

model Cart {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  addedAt     DateTime  @default(now())
  isSubmitted Boolean   @default(false)
  submittedAt DateTime?
  isAccepted  Boolean   @default(false)
  reviewedAt  DateTime?
  reviewedBy  String?
}
